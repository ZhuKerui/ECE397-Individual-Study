link - based data structures, such as linked lists and binary search trees, have many well - known rearrangement steps allowing for efficient implementations of insertion, deletion, and other operations.
as we show in this paper, even for a data structure as simple as a linked list used to implement the set type, the most efficient algorithms known so far may reject correct concurrent schedules.
in this paper, we consider combinatorial game rulesets based on data structures normally covered in an undergraduate computer science data structures course: arrays, stacks, queues, priority queues, sets, linked lists, and binary trees.
we have validated our analysis on several fundamental lock - free search data structures such as linked lists, hash tables, skip lists and binary trees.
the result is an efficient, fully - automated analysis that can handle even as complex data structures as skip lists, with the performance comparable to state - of - the - art fully - automated tools based on separation logic, which, however, specialise in dealing with linked lists only.
linked list module implements set data structure using lazy - list, lock - free list, lock - coupling list and estm .
by introducing two independent updating queues for inserting and deleting obstacles separately, and using indexing data structures and doubly linked lists for map maintenance, our algorithm updates as few as possible nodes using a bfs framework.
a doubly - linked list is a simple and very commonly used data structure in file systems but it is not very friendly to multi - threaded use.
a skiplist is an imperative software data structure that implements sets by maintaining several levels of ordered singly - linked lists in memory, where each level is a sublist of its lower levels.
these entailments are usually proof obligations generated when verifying programs that manipulate complex data structures like linked lists, trees, or graphs.
in this paper, we present an approach to building highly concurrent data structures, with special focus on the implementation of highly concurrent doubly - linked lists.
using bohne, we have verified operations on data structures such as linked lists with iterators and back pointers, trees with and without parent pointers, two - level skip lists, array data structures, and sorted lists.
the dynamic memory management extension successfully increases the expressiveness of roopl and as a result, shows that non - trivial reversible data structures, such as binary trees and doubly - linked lists, are feasible and do not contradict the reversible computing paradigm.
the idea and techniques in the design and implementation of a bst and prefix tree is generic and thus can also be used for other types of trees such as b - tree, and other link - based data structures such as linked lists and graphs.